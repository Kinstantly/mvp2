= Testing

This document includes information on automated testing and performance testing.

The goal is to do behavior-driven and test-driven development (BDD and TDD).  I don't always succeed.  Sometimes I write the tests afterwards.  The main thing is to get coverage for all types of functionality.  We're using Rspec and Cucumber.  See 'spec' and 'features' in the repository root.

== Rspec

* https://www.relishapp.com/rspec
* http://pragprog.com/book/achbd/the-rspec-book

Everything is in the 'spec' folder.

== FactoryGirl

* https://github.com/thoughtbot/factory_girl/blob/master/GETTING_STARTED.md

Factories are in 'spec/factories'.  There should be a file in there for each model.  If you create a new model, create a factory for it in that folder.

== Cucumber

* http://cukes.info/

Cucumber feature files are in the 'features' folder.  It shares FactoryGirl with rspec, i.e., in 'spec/factories'.

== Capybara

We are using the Capybara DSL for Cucumber.

* https://gist.github.com/zhengjia/428105 (DSL cheat sheet)
* http://rubydoc.info/github/jnicklas/capybara/master
* https://github.com/jnicklas/capybara#readme

== Database table modifications

If you create, drop, or modify any of the database tables, you'll need to rebuild the test database.  Use this rake task:

 bundle exec rake db:test:prepare

== TextMate

Install the TextMate bundles for RSpec and Cucumber.

* https://github.com/rspec/rspec-tmbundle (for RSpec)
* https://github.com/cucumber/cucumber-tmbundle (for Cucumber; works with TextMate 1.5)
* https://github.com/anandhak/cucumber-tmbundle (for Cucumber; works with TextMate 2)

To run Rspec and Cucumber from inside TextMate, go to Preferences -> Advanced -> Shell Variables.  Set the following shell variables.

 RUBYOPT rubygems
 TM_RUBY ~/.rvm/bin/rvm-auto-ruby
 TM_RSPEC_OPTS --drb
 TM_CUCUMBER_OPTS --drb
 CUCUMBER_FORMAT html

For the TM_RUBY value, you might have to use the expanded path instead of '~'.

Note: the \-\-drb option is used to run Rspec and Cucumber via the Spork server (see below).

== Spork

Rspec is configured to use a Spork DRb server when such a server is running for Rspec.  The same goes for Cucumber.  You don't need to run Spork servers, but it speeds things up if you do.  To use Spork, you should run a server for each of Rspec and Cucumber (see below for the start-up commands).

To use Spork with Rspec, you need to specify the '\-\-drb' option.  For example, to run all of the specs use this command:

 bundle exec rspec --drb spec

To use Spork with Cucumber, you need to specify the '\-\-drb' option.  For example, to run all of the features use this command:

 bundle exec cucumber --drb

Here are some useful aliases for starting and monitoring the Rspec and Cucumber Spork servers.  You need to use these aliases from the repository root.

 alias sporkrspecstart='bundle exec spork rspec >> log/sporkrspec.log 2>&1 &'
 alias sporkrspeclog='tail -f log/sporkrspec.log'
 alias sporkcukestart='bundle exec spork cucumber >> log/sporkcuke.log 2>&1 &'
 alias sporkcukelog='tail -f log/sporkcuke.log'

=== Restarting Spork

Some of your source files are preloaded by Spork.  If you modify any of these files and your tests depend on them, you will need to restart Spork to pick up the modifications.  To restart, you should kill and start the affected Spork process.

It helps to know which files are preloaded.  You can discover that with diagnostic mode.  For more information see https://github.com/sporkrb/spork#diagnostic-mode

== Guard

TODO: Install and configure Guard for Spork, Rspec, and Cucumber.  Guard will detect changes to relevant files and restart Spork or run the modified Rspec or Cucumber tests.

Gems to install and configure:

* https://github.com/guard/guard-spork
* https://github.com/guard/guard-rspec
* https://github.com/guard/guard-cucumber

== Performance testing

When doing performance tests, it's best to use an environment as close as possible to production.  The Rails benchmark and profiling facilities configure a production environment by default.  But you also need your data to reflect production.  The best way to do this is to create a 'performance' environment that uses its own database and Solr instance which are loaded with production data.  The configuration for the 'performance' environment is already set up.  Follow these steps to set up your performance database and Solr instance.

First back up your development database, as protection, in case you accidentally touch that database.

  pg_dump -f "mvp2_development_$(date '+%Y%m%d').sql" mvp2_development

If you already have a mvp2_performance database and you intend to get a copy of the production database, it's easiest to start from scratch by dropping your existing mvp2_performance database (note: you have to connect to a database other than the one you intend to drop).

  psql mvp2_development
  drop database mvp2_performance;
  \q

Create a fresh mvp2_performance database with the following command.

  RAILS_ENV=performance bundle exec rake db:create

Get a copy of the production database with the following command (if you don't have permission, have someone who does supply you with a copy).

  heroku pgbackups:url

Load the production copy into your mvp2_performance databse.  In this example the file with the production copy is named 'a327.dump'.

  pg_restore -d mvp2_performance a327.dump

Start up a Solr instance for performance testing.

  RAILS_ENV=performance bundle exec rake sunspot:solr:start

To be safe, modify all of the user email addresses and passwords in the performance database using the Rails console.

  RAILS_ENV=performance bundle exec rails console
  User.all.each{ |u| u.update_column(:email, "example+perf#{u.id}@example.com"); u.update_column(:encrypted_password, '*') }
  exit

Load the Solr instance with production data generated from the mvp2_performance database.

  RAILS_ENV=performance bundle exec rake sunspot:solr:reindex

To ensure that you are using the performance database and Solr instance, you'll need to require 'performance_test_helper' at the top of your performance test files (see below).

If you use Rails templates to generate performance tests, you'll need to replace the following require statements in the file

  require 'test_helper'
  require 'rails/performance_test_help'

with the following

  require 'performance_test_helper'

Finally, to do benchmarking and profiling, run the following commands.

  bundle exec rake test:benchmark
  bundle exec rake test:profile

And remember to apply any new database migrations to the performance database as they come up.  Also update the Solr index.

  RAILS_ENV=performance bundle exec rake db:migrate
  RAILS_ENV=performance bundle exec rake sunspot:solr:reindex

For more information:

* http://guides.rubyonrails.org/v3.2.13/performance_testing.html
* http://railscasts.com/episodes/411-performance-testing
* http://m.onkey.org/running-rails-performance-tests-on-real-data
* https://gist.github.com/hammady/4378820
