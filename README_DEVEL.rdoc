= Source Control

We use Git for source control.  Our canonical repository is at Github: https://github.com/Kinstantly/mvp2

== Git Flow

Git Flow can be used to aid in feature development, releases, and bug fixes.  We recommend using git-flow-avh.  For more info on git-flow-avh, see https://github.com/petervanderdoes/gitflow#readme

To install git-flow-avh, see https://github.com/petervanderdoes/gitflow/wiki

Once you have installed Git Flow, initialize your repository this way:

 git checkout master
 git pull
 git flow init -d

The following branches, types of branches, and tags are used.

* 'master' branch
* 'develop' branch
* feature branches
* release branches
* hot-fix branches
* tags on master for deployment to production

New development work is done on a feature branch that is created off the 'develop' branch.  A feature branch allows you to make a coherent set of changes that can be merged as a unit into other branches, e.g., into the 'develop' branch.  Using a feature branch also allows you to get a code review and approval of your changes before they are merged into the 'develop' branch.  Feature branches can be managed with git flow.

It's desirable to keep feature branches as short lived as possible.  A feature branch with fewer changes is easier to merge into other branches as a coherent unit with a minimum of conflicts.  If you have a long lived branch, it might have to be merged into 'develop' multiple times and as the branch gets older, more merge conflicts will have to be resolved (but this can be mitigated by using 'git rerere').  See the following blog postings for some opinions and tips on branching and merging, e.g., an argument for short-lived branches and a warning to only merge a feature branch into 'develop' (git checkout develop && git merge feature_branch) and *not* the other way around.

* gitster's philosophy of branching and merging: http://gitster.livejournal.com/42247.html
* Argument for keeping features small and branches short lived: http://dymitruk.com/blog/2012/02/05/branch-per-feature/
* Advice on which direction to merge: http://tech.novapost.fr/merging-the-right-way-en.html

When we are ready to deploy to staging for QA work, we will create a new release branch (off 'develop').  The release branch will be used to deploy to staging for testing by QA.  Bug fixes will be done on the release branch.  When QA signs off on the release, it will be merged into 'develop', merged into 'master', tagged, and deployed to production.  This is done using git flow.

Urgent patches to the production system (that can not wait for the next release) are done as a hot fix.  A hot fix branch is created off the 'master' branch (using git flow).  The hot fix can be deployed temporarily to staging for QA.  When the hot fix is approved, it is merged back into 'master' and 'develop' using git flow.  A tag is created on 'master' and it is deployed to production.

Below are the git flow commands we use most often.  All of these are completely compatible with regular git.

== Use a feature branch to create new features and modify existing ones.

=== Create a new feature branch, named FEATURE_NAME, off the 'develop' branch.

* Creates FEATURE_NAME branch.
* Switches to FEATURE_NAME branch.

 git pull
 git flow feature start FEATURE_NAME

You can now use this feature branch locally on your repository to make your changes.

=== Sharing your feature branch for code review and approval

To share your feature branch, e.g., for a code review and approval before merging into 'develop', push it to the origin repository.

 git push origin feature/FEATURE_NAME

=== Done developing on branch FEATURE_NAME.

Merge the new code into the 'develop' branch.

* Merges FEATURE_NAME into 'develop'.
* Removes FEATURE_NAME branch.
* Switches you to the 'develop' branch.

 git flow feature finish FEATURE_NAME
 git pull
 git push

== Creating, using, and finishing a release branch.

=== Create a new release branch, named RELEASE_NAME, off the 'develop' branch.

Switches you to the RELEASE_NAME branch.

 git pull
 git flow release start RELEASE_NAME

=== Push the new release branch to the remote repository.

 git push origin release/RELEASE_NAME

The team can now use this release branch for QA and bug fixes.

If you want to pull other people's commits on the release branch,
you'll probably need to do the following (rather than a plain 'git pull'):

 git pull origin release/RELEASE_NAME

To deploy this release to staging follow the deploy instructions in README_DEPLOY.rdoc.

=== Done with the release, ready to deploy to production.

* Merges RELEASE_NAME into 'master'.
* Tags the release.
* Merges RELEASE_NAME into 'develop'.
* Removes RELEASE_NAME branch locally (release branch still exists on the remote repository).

 git flow release finish RELEASE_NAME
 git pull
 git push
 git checkout master
 git pull
 git push
 git checkout develop

To deploy to production follow the deploy instructions in README_DEPLOY.rdoc.

=== Remove this release branch from the remote repository.

You can put off this step, but be sure to do this before creating the next release branch.

 git push origin :release/RELEASE_NAME

== To make time critical fixes to the production system, use a hotfix branch.

=== Got a bug in production.

Do a hot fix independent of what's being currently developed.

* Creates a new hotfix branch, named HOTFIX_NAME, off 'master'.
* Switches you to HOTFIX_NAME branch.

 git pull
 git flow hotfix start HOTFIX_NAME

If you are the only developer working on this hotfix, then you can make changes using this branch
without pushing it to the remote repository.  If other developers need to share this branch,
then push it to the remote repository.

 git push origin hotfix/HOTFIX_NAME  # Do this ONLY if you want to share this branch with other developers.

You can now use this hotfix branch to make your changes.

To deploy this hotfix to staging, follow the deploy instructions in README_DEPLOY.rdoc using this
hotfix branch instead of a release branch.

=== Bug fixed.

Merge the bug fix back into the 'master' and 'develop' branches.

* Merges HOTFIX_NAME into 'master'.
* Tags the hotfix.
* Merges HOTFIX_NAME into 'develop'.
* Removes HOTFIX_NAME branch.

 git flow hotfix finish HOTFIX_NAME
 git pull
 git push
 git checkout master
 git pull
 git push
 git checkout develop

To deploy to production follow the deploy instructions in README_DEPLOY.rdoc.

=Web Performance: Minimizing payload size 

==Tools to evaluate web performance: 

* YSlow: http://yslow.org
* PageSpeed: https://developers.google.com/speed/pagespeed
* Audits Panel of Chrome Developer Tools
* GTMetrix http://gtmetrix.com (for publicly accessible pages) 

==Basic guidelines:

===IMAGES:

Specify a width and height for all images to allow faster rendering by eliminating the need for unnecessary reflows 
and repaints. Be sure to set the dimensions on the <img> element itself, or a block-level parent. 
If the parent is not block-level, the dimensions will be ignored. Do not set dimensions on an ancestor 
that is not an immediate parent.

For all profile photos, we convert all the photos to .jpg and compress by 10\%. 
In addition we  strip off all the meta data and interlace photo to speed up photo appearance on the client side. 
You can change these post processing settings in  app/models/profile.rb.

In case post processing settings has changed and you want to re-process all existing images, use: 
 rake paperclip:refresh CLASS=Profile 

===DOM:

Reduce the number of DOM Elements and keep it under max 700 even for complex pages. 

===JS:

All site-wide JS is placed in application.js manifest and page specific JS grouped into page specific manifests
(naming convention: controller_view.js, e.g. profile_search.js, review_new.js etc).

For external JS resources that cannot be served via asset pipeline, put these scripts at the bottom of the page 
and consider lazy loading if possible
(refer to load_google_api example in app/views/layouts/application.html.haml).

