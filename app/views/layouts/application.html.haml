- copyright_note = "\&copy; Copyright 2013 - #{Date.today.year} Kinstantly, Inc. All Rights Reserved."
!!! XML
!!!
/[if lt IE 7] <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en">
/[if IE 7] <html class="no-js lt-ie9 lt-ie8" lang="en">
/[if IE 8] <html class="no-js lt-ie9" lang="en">
<!--[if gt IE 8]><!-->
%html.no-js{:lang => "en"}
	<!--<![endif]-->
	%head
		%meta{charset: 'utf-8'}
		%meta{content: 'IE=edge,chrome=1', 'http-equiv' => 'X-UA-Compatible'}
		%meta{content: 'width=device-width, initial-scale=1.0', name: 'viewport'}
		%meta{content: (@meta_keywords.presence || t('meta.keywords')), name: 'keywords'}
		%meta{content: (@meta_description.presence || t('meta.description')), name: 'description'}
		= favicon_link_tag '/favicon.ico?v=1'
		%link{href: '/apple-touch-icon.png', rel: 'apple-touch-icon'}
		%title
			- if @page_title_prefix.present?
				= "#{@page_title_prefix} |"
			= "#{company_name} | #{company_tagline}"
		-# Allow option to load CSS before javascript so we do not see a flash of unformatted HTML.
		= yield :head_before_js
		/[if lt IE 9]
			= javascript_include_tag '//html5shim.googlecode.com/svn/trunk/html5.js'
		= javascript_include_tag 'application'
		= yield :head
		= csrf_meta_tags
	%body{class: @body_class}
		-# Name-space my global variables, e.g., my_vars.a_val, my_vars.t.some_text, my_vars.f.a_function
		#fb-root
		%script var my_vars={t:{},f:{}};
		%header#header
			%section#account-bar
				%ul.container
					- if user_signed_in?
						%li.logged-in
							- if current_user.is_provider? && current_user.profile
								%span.photo_name_span
									%span.avatar.mini>
										= image_tag current_user.profile.profile_photo.url(:medium), alt: "#{current_user.profile.display_name_or_company}", style: "max-width:24px;", onerror: "this.src = '#{image_path(Profile::DEFAULT_PHOTO_PATH)}'"
									= greeting
									,
							= link_to t('views.user.view.menu_title'), 'javascript:void(0)', {class: :account}
							%ul.account-menu
								%li
									= account_settings_link
								- if current_user.is_provider?
									%li
										= edit_my_profile_link
									%li
										= view_my_profile_link
						%li{:style => "text-transform:uppercase;"}
							= sign_in_out_link
					- else
						%li.logged-out{:style => "text-transform:uppercase;"}
							= sign_in_out_link
							|
							= user_sign_up_link
						%li.provider
							= provider_sign_up_link t('views.sign_up.provider_link'), {class: :button}
			= yield :body_header
		.flash_messages
			- if notice.present?
				.notice= notice
			- if alert.present? and !@suppress_header_alert
				.alert= alert
		= yield :body_before_main_content
		%article#content{class: "container" + (@content_class ? " #{@content_class}" : "")}
			- if @body_class.try :match, /\binterior\b/
				- unless @content_class.try :include?, 'no-upper-hr'
					%hr/
			= yield
			.follow
				%span Follow us on:
				%a.fb{:href => "https://www.facebook.com/kinstantly", :target => "_blank"} Facebook
				%a.tw{:href => "https://twitter.com/Kinstantly", :target => "_blank"} Twitter
				%a.gp{:href => "https://plus.google.com/+Kinstantly", :target => "_blank"} Google Plus
		%footer#footer
			%p#bottom
				= about_link wrapper: {tag: :span}
				= contact_link wrapper: {tag: :span}
				= terms_link wrapper: {tag: :span}
				= privacy_link wrapper: {tag: :span}
				%br/
				= t 'company.copyright_html', year: Date.today.year
		#line
		= render partial: 'layouts/tracking'
		= render partial: 'layouts/g_analytics'

		:javascript
			my_vars.google_api_key = "#{GOOGLE_BROWSER_API_KEY}"
			my_vars.fb_api_key	   = "#{FB_API_KEY}"

			//hide utf8 param in search provider form
			if($('#providerSearch input[name="utf8"]') && $('#providerSearch input[name="utf8"]').parent())
				$('#providerSearch input[name="utf8"]').parent().hide() 
		
		:coffeescript
			# Autocomplete location field in search form.
			bind_provider_search_location_autocomplete = () ->
				location_input = document.getElementById('provider_search_location')
				if location_input and google?.maps?.places?.Autocomplete
					my_vars.provider_search_location_autocomplete ||= new google.maps.places.Autocomplete(location_input, {types: ['geocode']})
			
			# Load fb api and init google autocomplete, google map on profile and search pages
			window.post_load_init = () ->
				if google?.maps
					bind_provider_search_location_autocomplete()
					my_vars.profile_map?.init(my_vars.f.load_fb_api)
					my_vars.search_results_map?.init(my_vars.f.load_fb_api)
				
				
			# Appends maps.googleapis script
			my_vars.f.load_google_api = () ->
				script = document.createElement('script');
				script.type = 'text/javascript';
				script.src = "https://maps.googleapis.com/maps/api/js?key=" + my_vars.google_api_key + "&libraries=places&sensor=false&callback=post_load_init";
				document.body.appendChild(script);

			# Appends FB api script
			my_vars.f.load_fb_api = () ->
				id = 'facebook-jssdk'
				if (document.getElementById(id)) 
					return;
				script = document.createElement('script');
				script.id = id
				script.type = 'text/javascript';
				script.async = true;
				script.src = "//connect.facebook.net/en_US/sdk.js#xfbml=1&appId=" + my_vars.fb_api_key + "&version=v2.0";
				fjs = document.getElementsByTagName('script')[0];
				fjs.parentNode.insertBefore(script, fjs);
				
			window.onload = ->
				# Load maps.googleapis script
				my_vars.f.load_google_api()
				
				# Cache all jQuery ajax calls
				$.ajaxSetup({
					cache: true
				})
				
				# Ensure rating stars render properly after everything is loaded.
				my_vars.f.rating_score_reset() if my_vars.f.rating_score_reset
				my_vars.f.rate_reset() if my_vars.f.rate_reset
				
			#
			# # Add change event to selects, and trigger it on load, so the span is up to date
			# selects = $('.select-wrapper > select').on('change', ->
			# 	# Assign the jquery object to a variable 
			# 	select = $(this)
			# 	# Get placeholder element
			# 	placeholder = select.prev('.select-text')
			# 	# Use the text from the selected option to update the placeholder text
			# 	placeholder.html(select.children('option:selected').text()) if placeholder.length
			# ).change()
			# # Workaround for Firefox which doesn't trigger the change event
			# # if the user is using the keyboard to navigate through the options
			# selects.on('keypress', -> selects.trigger('change'))
			#
			
			# Google autocomplete is mucking with the placeholder in a way that breaks on IE,
			# specifically when you focus on the input and then immediately unfocus.  This is the fix.
			$('#search_providers').submit ->
				el = $('#provider_search_location')
				el.val '' if el.val() == el.attr('placeholder')
			#
			# Implement text input and textarea placeholders for broken browsers, e.g., IE.
			my_vars.f.text_field_placeholders = (context) -> $('input:text, textarea', context).placeholder()
			my_vars.f.text_field_placeholders document
			$(document).on 'nested:fieldAdded', (e) -> my_vars.f.text_field_placeholders e.field
