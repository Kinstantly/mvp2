- profile ||= @profile
- @page_title = profile_page_title profile
- @default_country ||= default_profile_country
.profile_areas
	- if can? :manage, Profile
		%fieldset.profile_id
			= t 'views.profile.view.id', id: profile.id
	%fieldset.basic_profile
		%legend= t 'views.profile.legend.basic_profile'
		.name
			Name
			%br
			.text_field
				= f.label :first_name
				= f.text_field :first_name, id: 'profile_first_name', class: 'display_name_field'
			.text_field
				= f.label :middle_name
				= f.text_field :middle_name, id: 'profile_middle_name', class: 'display_name_field'
			.text_field
				= f.label :last_name
				= f.text_field :last_name, id: 'profile_last_name', class: 'display_name_field'
			.text_field
				= f.label :credentials
				= f.text_field :credentials, id: 'profile_credentials', class: 'display_name_field'
				%span.note= t 'views.profile.edit.credentials_example'
		.display_name_area
			Display name
			%span.display_name
				= profile_display_name profile
		.email
			= f.label :email
			= f.text_field :email
			%span.note= t 'views.profile.edit.email_example'
		.company_name
			= f.label :company_name
			= f.text_field :company_name
			%span.note= t 'views.profile.edit.company_name_example'
		.url
			= f.label :url
			= f.text_field :url
			%span.note= t 'views.profile.edit.url_example'
		.headline
			= f.label :headline
			= f.text_field :headline, size: 50
			%span.note= t 'views.profile.edit.headline_example'
		.photo_source_url
			= f.label :photo_source_url
			= f.text_field :photo_source_url, size: 70
		.search_terms
			= f.label :search_terms
			= f.text_area :search_terms, size: '30x5'
			%span.note= t 'views.profile.edit.search_terms_tip'
	%fieldset.location_contact_profile
		%legend= Profile.human_attribute_name :locations
		= f.fields_for :locations do |lf|
			- country = lf.object.country.presence || @default_country
			- country_data = CountryData.new code: country
			- country_data.call
			.address
				= lf.label :address1
				= lf.text_field :address1
				= lf.label :address2
				= lf.text_field :address2
			.country
				= lf.label :country
				= lf.country_select :country, {priority: ['US', 'CA', 'AU', 'NZ', 'GB']}, class: 'country_select'
			.city_state
				= lf.label :city
				= autocomplete_form_field :city, nil, autocomplete_location_city_profiles_path, form_builder: lf
				= lf.label :region, country_data.region_label
				= lf.subregion_select :region, country, include_blank: '--'
			.postal_code
				= lf.label :postal_code, country_data.postal_code_label
				= lf.text_field :postal_code
			.phone
				= lf.label :phone
				= lf.text_field :phone
				%span.note= t 'views.location.edit.phone_example'
			.location_note
				= lf.label :note
				= lf.text_field :note
				%span.note= t 'views.location.edit.note_example'
			- if current_user.profile_editor?
				.search_area_tag
					= lf.label :search_area_tag_id
					= lf.collection_select :search_area_tag_id, SearchAreaTag.all, :id, :name, {include_blank: 'Other'}
			= lf.link_to_remove t('views.location.edit.remove'), data: { confirm: t('views.location.edit.remove_confirm_admin') }
		= f.link_to_add t('views.location.edit.add'), :locations
	%fieldset.expertise_profile#edit_expertise
		%legend= t 'views.profile.legend.expertise_profile_for', name: profile.display_name_or_company
		.categories
			%span.label= "#{Profile.human_attribute_name(:categories)}:"
			= profile_display_categories profile
		.subcategories
			%span.label= "#{Profile.human_attribute_name(:subcategories)}:"
			= profile_display_subcategories profile
		.services
			%span.label= "#{Profile.human_attribute_name(:services)}:"
			= profile_display_services profile
		.expertise_selection
			= profile_categories_hidden_field_tag f
			= profile_subcategories_hidden_field_tag f
			= profile_services_hidden_field_tag f
			- Category.predefined.home_page_order.each do |category|
				.col
					%h4
						= profile_categories_check_box_tag profile, category, f
						= profile_categories_check_box_label category
					%ul
						- category.subcategories.by_display_order.order_by_name.each do |subcategory|
							%li.subcategory
								= profile_subcategories_check_box_tag profile, subcategory, category, f
								= profile_subcategories_check_box_label subcategory, category
							%ul
								- subcategory.services.by_display_order.order_by_name.each do |service|
									%li
										= profile_services_check_box_tag profile, service, subcategory, f
										= profile_services_check_box_label service, subcategory
		.specialties
			= f.label :specialties
			%span= t 'views.profile.edit.specialties_tip_html'
			%br
			%span.predefined_specialties
				= profile_specialties_hidden_field_tag f
				- profile.specialties.each do |specialty|
					= profile_specialties_check_box profile, specialty.id, specialty.name, true, 'check_box', f
			%span.note= t 'views.profile.edit.specialties_tip2'
		.custom_specialties
			= f.label :custom_specialty_names
			= button_tag id: 'add_custom_specialties_text_field' do
				= content_tag :strong, 'Enter a specialty not shown above'
			%br
			= profile_custom_specialties_hidden_field_tag(f)
			- i = 0; profile.custom_specialty_names.each do |name|
				.text_field
					= profile_custom_specialties_autocomplete_field_tag(profile, name, "#{i = i+1}", f)
			- @profile_custom_specialties_i = i
			- @profile_custom_specialties_text_field_template = profile_custom_specialties_autocomplete_field_tag(profile, '', 'INDEX', f)
		.ages_stages
			= f.label :age_stages
			%br
			= profile_age_ranges_hidden_field_tag(f)
			- AgeRange.active.sorted.each do |age_range|
				.check_box
					= profile_age_ranges_check_box_tag(@profile, age_range, f)
					= profile_age_ranges_check_box_label age_range
		.ages
			.text_field
				= f.label :ages_stages_note
				%br
				= f.text_field :ages_stages_note, size: 50
				%br
				%span.note= t('views.profile.edit.ages_stages_note_example_html')
	%fieldset.professional_profile
		%legend= t 'views.profile.legend.professional_profile'
		.availability_service_area
			= Profile.human_attribute_name :availability_service_area_note
			%br
			- Profile::CONSULTATION_MODES.each do |attribute|
				.check_box
					= f.check_box attribute
					= f.label attribute
			.check_box
				= f.check_box :consult_remotely
				= f.label :consult_remotely
			.check_box
				= f.check_box :accepting_new_clients
				= f.label :accepting_new_clients
			.label_area
				= f.label :availability_service_area_note
			= f.text_area :availability_service_area_note, size: '50x5'
			%br
			%span.note= t 'views.profile.edit.availability_service_area_note_example_html'
		.year_started
			.label_area
				= f.label :year_started
				= t 'views.profile.edit.year_started_explanation'
			= f.text_field :year_started
			%span.note= t 'views.profile.edit.year_started_example'
		.education
			.label_area
				= f.label :education
			= f.text_area :education, size: '50x5'
			%br
			%span.note= t 'views.profile.edit.education_tip'
			%br
			%span.note= t 'views.profile.edit.education_example_html'
		.resources
			.label_area
				= f.label :resources
			= f.text_area :resources, size: '50x8'
			%br
			%span.note= t 'views.profile.edit.resources_prompt'
			%br
			%span.note= t 'views.profile.edit.resources_tip'
		.certifications
			.label_area
				= f.label :certifications
			= f.text_field :certifications
			%span.note= t 'views.profile.edit.certifications_example'
		.languages
			.label_area
				= f.label :languages
			= f.text_field :languages
			%span.note= t 'views.profile.edit.languages_example'
		.insurance_accepted
			.label_area
				= f.label :insurance_accepted, t('views.profile.view.insurance_accepted_html')
			= f.text_area :insurance_accepted, size: '50x5'
			%br
			%span.note= t 'views.profile.edit.insurance_accepted_example'
			%br
			%span.note= t 'views.profile.edit.insurance_accepted_tip'
		.summary
			.label_area
				= f.label :summary
			= f.text_area :summary, size: '50x8'
		.pricing
			.label_area
				= f.label :pricing
			= f.text_area :pricing, size: '50x5'
			%br
			%span.note= t 'views.profile.edit.pricing_example'
			%br
			%span.note= t 'views.profile.edit.pricing_tip'
			%br
			= f.label :pricing_check_boxes, t('views.profile.edit.check_box_prompt')
			.check_box
				= f.check_box :free_initial_consult
				= f.label :free_initial_consult
			.check_box
				= f.check_box :sliding_scale_available
				= f.label :sliding_scale_available
			.check_box
				= f.check_box :financial_aid_available
				= f.label :financial_aid_available
		.hours
			.label_area
				= f.label :hours
			= f.text_area :hours, size: '30x5'
			%br
			%span.note= t 'views.profile.edit.hours_example'
			%br
			= f.label :hours_check_boxes, t('views.profile.edit.check_box_prompt')
			.check_box
				= f.check_box :evening_hours_available
				= f.label :evening_hours_available
			.check_box
				= f.check_box :weekend_hours_available
				= f.label :weekend_hours_available
	-# The following attributes are only accessible by a profile editor (including the admin role).
	- if can? :manage, Profile
		%fieldset#admin_attributes
			%legend= t 'views.profile.legend.admin_info'
			#lead_generator
				.label_area
					= f.label :lead_generator
				= autocomplete_form_field :lead_generator, nil, autocomplete_profile_lead_generator_profiles_path, form_builder: f
			#admin_notes
				.label_area
					= f.label :admin_notes
				= f.text_area :admin_notes, size: '50x5'
			#widget_code
				.label_area
					= f.label :widget_code
				= f.text_area :widget_code, size: '100x10'
			#search_widget_code
				.label_area
					= f.label :search_widget_code
				= f.text_area :search_widget_code, size: '100x10'
				%br
				%span.note= t 'views.profile.edit.search_widget_code_example'
			.check_box
				= f.check_box :show_stripe_connect
				= f.label :show_stripe_connect
			.check_box
				= f.check_box :allow_charge_authorizations
				= f.label :allow_charge_authorizations
			.check_box
				= f.check_box :public_on_private_site
				= f.label :public_on_private_site
			.check_box
				= f.check_box :is_published
				= f.label :is_published

-# OK to do ruby interpolation in a javascript filter--do it all here and not in the coffeescript filter!!
-# Any interpolated values needed in the coffeescript should be stored here to be referenced by the result
-# of the coffeescript filter.  This allows caching of the coffeescript compilation.
:javascript
	// Values to be used in the CoffeeScript-generated JavaScript.
	my_vars.column_width = '#{98 / Category.predefined.count}%';
	my_vars.t.add_text_field = '#{t "views.profile.edit.add_text_field"}';
	my_vars.custom_specialties_i = #{@profile_custom_specialties_i};
	my_vars.custom_specialties_template = '#{escape_javascript @profile_custom_specialties_text_field_template}';

-# No ruby interpolation in the coffeescript filter.  It breaks caching of the coffeescript filter result.
:coffeescript
	# Refresh display name as contributing input tags are modified.
	refresh_display_name = () ->
		$('.display_name').text profile_display_name($('#profile_first_name').val(), $('#profile_middle_name').val(), $('#profile_last_name').val(), $('#profile_credentials').val())
	$('.display_name_field').keyup (e) ->
		refresh_display_name()
	
	# Add extra text input tags for custom specialties.
	add_custom_specialties_text_field = (e) ->
		e.preventDefault()
		$('.custom_specialties').append '<span id="custom_specialties_field_prompt" class="note">' +
			my_vars.t.add_text_field + '</span>' if $('#custom_specialties_field_prompt').length == 0
		$('#custom_specialties_field_prompt').before '<div class="text_field">' +
			my_vars.custom_specialties_template.replace(/INDEX/g, String(++my_vars.custom_specialties_i)) + '</div>'
		$('.custom_specialties input:last').focus().keydown (e) ->
			add_custom_specialties_text_field e if e.which == 13 # carriage return
	$('#add_custom_specialties_text_field').on 'click', add_custom_specialties_text_field
	
	# If country is changed in this location field, load the corresponding regions and labels.
	on_country_changed = (field) ->
		field.find('.country_select').on 'change', () ->
			country_select = $(this)
			country_select_id = country_select.attr('id')
			country_params =
				code: country_select.val()
				region_select_id: country_select_id.replace(/_country$/, '_region')
				postal_code_id: country_select_id.replace(/_country$/, '_postal_code')
			$.getJSON '/profiles/location_country_data', country_params, (country_data) ->
				$('label[for="' + country_data.region_select_id + '"]').html country_data.region_select_label
				$('#' + country_data.region_select_id).html country_data.region_options
				$('label[for="' + country_data.postal_code_id + '"]').html country_data.postal_code_label
	
	# Set up triggers for fields that are already loaded.
	$('.fields').each ->
		on_country_changed $(this)
	
	# Set up triggers for any fields that are added after the page loaded.
	$(document).on 'nested:fieldAdded:locations', (event) ->
		on_country_changed event.field
	
	# Run after document is loaded.
	$ ->
		# Dynamically set column width based on number of columns.
		$('.expertise_selection .col').css 'width', my_vars.column_width
		# The same item might occur elsewhere in the list, so check/uncheck all instances of it.
		$('.expertise_selection input:checkbox').change (e) ->
			checked = this.checked
			$('.expertise_selection .' + $(this).attr('data-css-class')).each (i, element) ->
				element.checked = checked
				true # Return explicit true value so that we continue processing any following elements.
