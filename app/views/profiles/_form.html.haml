- profile ||= @profile
- country ||= (profile.try(:locations).try(:first).try(:country).presence || default_profile_country)
- @page_title = profile_page_title profile
.profile_areas
	- if can? :manage, Profile
		.profile_id
			= t 'views.profile.view.id', id: profile.id
	.basic_profile
		.name
			Name
			%br
			.text_field
				= f.label :first_name
				= f.text_field :first_name, id: 'profile_first_name', class: 'display_name_field'
			.text_field
				= f.label :middle_name
				= f.text_field :middle_name, id: 'profile_middle_name', class: 'display_name_field'
			.text_field
				= f.label :last_name
				= f.text_field :last_name, id: 'profile_last_name', class: 'display_name_field'
			.text_field
				= f.label :credentials
				= f.text_field :credentials, id: 'profile_credentials', class: 'display_name_field'
				%span.note= t 'views.profile.edit.credentials_example'
		.display_name_area
			Display name
			%span.display_name
				= profile_display_name profile
		.email
			= f.label :email
			= f.text_field :email
			%span.note= t 'views.profile.edit.email_example'
		.company_name
			= f.label :company_name
			= f.text_field :company_name
			%span.note= t 'views.profile.edit.company_name_example'
		.url
			= f.label :url
			= f.text_field :url
			%span.note= t 'views.profile.edit.url_example'
		.headline
			= f.label :headline
			= f.text_field :headline, size: 50
			%span.note= t 'views.profile.edit.headline_example'
		.photo_source_url
			= f.label :photo_source_url
			= f.text_field :photo_source_url, size: 70
	.location_contact_profile
		= f.fields_for :locations do |lf|
			.address
				= lf.label :address1
				- address1_prompt = 'number and street'
				= lf.text_field :address1, placeholder: address1_prompt, title: address1_prompt
				- address2_prompt = 'room, suite, floor if any'
				= lf.text_field :address2, placeholder: address2_prompt, title: address2_prompt
				%span.note= t 'views.location.edit.address2_example'
			.city_state
				= lf.label :city
				= autocomplete_form_field :city, nil, autocomplete_location_city_profiles_path, form_builder: lf
				= lf.label :region
				= lf.subregion_select :region, country, include_blank: '--'
			.postal_code
				= lf.label :postal_code
				= lf.text_field :postal_code
				= lf.hidden_field :country, value: country
			.phone
				= lf.label :phone
				= lf.text_field :phone
				%span.note= t 'views.location.edit.phone_example'
			- if current_user.profile_editor?
				.search_area_tag
					= lf.label :search_area_tag_id
					= lf.collection_select :search_area_tag_id, SearchAreaTag.all, :id, :name, {include_blank: 'Other'}
			= lf.link_to_remove 'Mark this location for removal upon saving', confirm: 'This location will be removed when you save the profile.'
		= f.link_to_add 'Fill in another location', :locations
	.expertise_profile
		.categories
			= f.label :categories
			%span= t 'views.profile.edit.categories_tip'
			%br
			= profile_categories_hidden_field_tag(f)
			- profile_category_choices(profile).each do |category|
				.check_box
					= profile_categories_check_box_tag(profile, category, f)
					= profile_categories_check_box_label category
		.services
			= f.label :services
			%span= t 'views.profile.edit.services_tip'
			%br
			%span.predefined_services
		.custom_services
			= f.label :custom_service_names
			= button_tag id: 'add_custom_services_text_field' do
				= content_tag :strong, 'Enter a service not shown above'
			%br
			= profile_custom_services_hidden_field_tag(f)
			- i = 0; profile.custom_service_names.each do |name|
				.text_field
					= profile_custom_services_autocomplete_field_tag(profile, name, "#{i = i+1}", f)
			- @profile_custom_services_i = i
			- @profile_custom_services_text_field_template = profile_custom_services_autocomplete_field_tag(profile, '', 'INDEX', f)
		.specialties
			= f.label :specialties
			%span= t 'views.profile.edit.specialties_tip'
			%br
			%span.predefined_specialties
		.custom_specialties
			= f.label :custom_specialty_names
			= button_tag id: 'add_custom_specialties_text_field' do
				= content_tag :strong, 'Enter a specialty not shown above'
			%br
			= profile_custom_specialties_hidden_field_tag(f)
			- i = 0; profile.custom_specialty_names.each do |name|
				.text_field
					= profile_custom_specialties_autocomplete_field_tag(profile, name, "#{i = i+1}", f)
			- @profile_custom_specialties_i = i
			- @profile_custom_specialties_text_field_template = profile_custom_specialties_autocomplete_field_tag(profile, '', 'INDEX', f)
		.specialties_description
			= f.label :specialties_description
			= f.text_area :specialties_description, size: '25x4'
		.stages
			= f.label :stages, t('views.profile.edit.stages')
			%br
			.check_box
				= f.check_box :adoption_stage
				= f.label :adoption_stage
			.check_box
				= f.check_box :preconception_stage
				= f.label :preconception_stage
			.check_box
				= f.check_box :pregnancy_stage
				= f.label :pregnancy_stage
		.ages
			.text_field
				= f.label :ages
				= f.text_field :ages, size: 50
				%br
				%span.note= t('views.profile.edit.ages_example')
	.professional_profile
		.accepting_new_clients
			.check_box
				= f.check_box :accepting_new_clients
				= f.label :accepting_new_clients
		.consultations
			.check_box
				= f.check_box :consult_by_email
				= f.label :consult_by_email
			.check_box
				= f.check_box :consult_by_phone
				= f.label :consult_by_phone
			.check_box
				= f.check_box :consult_by_video
				= f.label :consult_by_video
			.check_box
				= f.check_box :consult_in_person
				= f.label :consult_in_person
			.check_box
				= f.check_box :consult_in_group
				= f.label :consult_in_group
			.check_box
				= f.check_box :visit_home
				= f.label :visit_home
			.check_box
				= f.check_box :visit_school
				= f.label :visit_school
			.check_box
				= f.check_box :consult_at_hospital
				= f.label :consult_at_hospital
			.check_box
				= f.check_box :consult_at_camp
				= f.label :consult_at_camp
			.check_box
				= f.check_box :consult_at_other
				= f.label :consult_at_other
		.year_started
			.label_area
				= f.label :year_started
				= t 'views.profile.edit.year_started_explanation'
			= f.text_field :year_started
			%span.note= t 'views.profile.edit.year_started_example'
		.education
			.label_area
				= f.label :education
			= f.text_area :education, size: '50x5'
			%br
			%span.note= t 'views.profile.edit.education_tip'
			%br
			%span.note= t 'views.profile.edit.education_example_html'
		.certifications
			.label_area
				= f.label :certifications
			= f.text_field :certifications
			%span.note= t 'views.profile.edit.certifications_example'
		.languages
			.label_area
				= f.label :languages
			= f.text_field :languages
			%span.note= t 'views.profile.edit.languages_example'
		.insurance_accepted
			.label_area
				= f.label :insurance_accepted
			= f.text_area :insurance_accepted, size: '50x5'
			%br
			%span.note= t 'views.profile.edit.insurance_accepted_example'
			%br
			%span.note= t 'views.profile.edit.insurance_accepted_tip'
		.summary
			.label_area
				= f.label :summary
			= f.text_area :summary, size: '50x8'
		.pricing
			.label_area
				= f.label :pricing
			= f.text_area :pricing, size: '50x5'
			%br
			%span.note= t 'views.profile.edit.pricing_example'
			%br
			%span.note= t 'views.profile.edit.pricing_tip'
		.hours
			.label_area
				= f.label :hours
			= f.text_area :hours, size: '30x5'
			%br
			%span.note= t 'views.profile.edit.hours_example'
		.service_area
			.label_area
				= f.label :service_area
			= f.text_area :service_area, size: '30x5'
			%br
			%span.note= t 'views.profile.edit.service_area_example'
	-# Mass assignment is not allowed on admin attributes, so use simple params and tags.
	- if can? :manage, Profile
		.admin_options
			#lead_generator
				.label_area
					= label_tag :lead_generator, Profile.human_attribute_name(:lead_generator)
				= autocomplete_form_field :lead_generator, @profile.lead_generator, autocomplete_profile_lead_generator_profiles_path
			#admin_notes
				.label_area
					= label_tag :admin_notes, Profile.human_attribute_name(:admin_notes)
				= text_area_tag :admin_notes, @profile.admin_notes, size: '50x5'
			.check_box
				= profile_publish_check_box :is_published, @profile
				= label_tag :is_published, Profile.human_attribute_name(:is_published)

-# OK to do ruby interpolation in a javascript filter--do it all here and not in the coffeescript filter!!
-# Any interpolated values needed in the coffeescript should be stored here to be referenced by the result
-# of the coffeescript filter.  This allows caching of the coffeescript compilation.
:javascript
	window.edit_profile = {
		parents: {}, maps: {}, names: {}, ids_names: {},
		check_box_caches: {}, check_box_templates: {}, hidden_field_tags: {},
		prompts: {}
	};
	// categories -> services
	edit_profile.parents['services'] = 'categories';
	edit_profile.check_box_caches['services'] = 
		#{profile_services_check_box_cache(profile, 'check_box', f).to_json};
	edit_profile.check_box_templates['services'] = 
		"#{escape_javascript profile_services_check_box(profile, '_ID_', '_NAME_', false, 'check_box', f)}";
	var info = #{profile_categories_services_info(profile).to_json};
	edit_profile.maps['services'] = info[0];
	edit_profile.names['services'] = info[1];
	edit_profile.ids_names['services'] = #{profile.service_ids_names.to_json};
	edit_profile.hidden_field_tags['services'] = 
		"#{escape_javascript profile_services_hidden_field_tag(f)}";
	edit_profile.prompts['services'] = 
		"#{escape_javascript content_tag(:div, 'Choose a category and we\'ll show you a list of services.', class: 'notice')}";
	// services -> specialties
	edit_profile.parents['specialties'] = 'services';
	edit_profile.check_box_caches['specialties'] = 
		#{profile_specialties_check_box_cache(profile, 'check_box', f).to_json};
	edit_profile.check_box_templates['specialties'] = 
		"#{escape_javascript profile_specialties_check_box(profile, '_ID_', '_NAME_', false, 'check_box', f)}";
	var info = #{profile_services_specialties_info(profile).to_json};
	edit_profile.maps['specialties'] = info[0];
	edit_profile.names['specialties'] = info[1];
	edit_profile.ids_names['specialties'] = #{profile.specialty_ids_names.to_json};
	edit_profile.hidden_field_tags['specialties'] = 
		"#{escape_javascript profile_specialties_hidden_field_tag(f)}";
	edit_profile.prompts['specialties'] = 
		"#{escape_javascript content_tag(:div, 'Choose a service and we\'ll show you a list of specialties.', class: 'notice')}";
	// Values to be used in the next script.
	edit_profile.custom_services_i = #{@profile_custom_services_i};
	edit_profile.custom_specialties_i = #{@profile_custom_specialties_i};
	edit_profile.t_add_text_field = '#{t "views.profile.edit.add_text_field"}';
	edit_profile.custom_services_template = '#{escape_javascript @profile_custom_services_text_field_template}';
	edit_profile.custom_specialties_template = '#{escape_javascript @profile_custom_specialties_text_field_template}';

-# No ruby interpolation in the coffeescript filter.  It breaks caching of the coffeescript filter result.
:coffeescript
	# Refresh display name as contributing input tags are modified.
	refresh_display_name = () ->
		$('.display_name').text profile_display_name($('#profile_first_name').val(), $('#profile_middle_name').val(), $('#profile_last_name').val(), $('#profile_credentials').val())
	$('.display_name_field').keyup (e) ->
		refresh_display_name()
	
	# Show check boxes for children that belong to the currently checked parents.
	# In addition, always show check boxes for children that were originally checked (i.e., are currently persisted).
	show_check_boxes = (children) ->
		choices = {}
		$('.'+edit_profile.parents[children]+' .check_box input:checked').each ->
			ids = edit_profile.maps[children][$(this).val()]
			if ids
				choices[edit_profile.names[children][id]] = id for id in ids
			true
		choices[id_name.name] = id_name.id for id_name in edit_profile.ids_names[children]
		boxes = $('.predefined_'+children)
		$('.check_box', boxes).each ->
			edit_profile.check_box_caches[children][$('input', this).val()] = this
		boxes.empty()
		boxes.append edit_profile.hidden_field_tags[children]
		names = Object.keys(choices)
		if names.length > 0
			for name in names.sort((a, b) -> a.toLowerCase().localeCompare(b.toLowerCase()))
				id = choices[name]
				check_box = edit_profile.check_box_caches[children][id] || edit_profile.check_box_templates[children].replace(/_ID_/g, id).replace(/_NAME_/g, name)
				boxes.append check_box
		else
			boxes.append edit_profile.prompts[children]
		# If redisplaying services, we may have a new set of check boxes to monitor.
		if children == 'services'
			$('.services .check_box input').change (e) ->
				show_check_boxes('specialties')
	
	# When a category is changed, redisplay all descendent choices.
	$('.categories .check_box input').change (e) ->
		show_check_boxes('services')
		show_check_boxes('specialties')
	
	# Show check boxes for services.
	show_check_boxes('services')
	# Show check boxes for specialties.
	show_check_boxes('specialties')
	
	# Add extra text input tags for custom services.
	add_custom_services_text_field = (e) ->
		e.preventDefault()
		$('.custom_services').append '<span id="custom_services_field_prompt" class="note">' +
			edit_profile.t_add_text_field + '</span>' if $('#custom_services_field_prompt').length == 0
		$('#custom_services_field_prompt').before '<div class="text_field">' +
			edit_profile.custom_services_template.replace('INDEX', String(++edit_profile.custom_services_i)) + '</div>'
		$('.custom_services input:last').focus().keydown (e) ->
			add_custom_services_text_field e if e.which == 13 # carriage return
	$('#add_custom_services_text_field').click add_custom_services_text_field
	
	# Add extra text input tags for custom specialties.
	add_custom_specialties_text_field = (e) ->
		e.preventDefault()
		$('.custom_specialties').append '<span id="custom_specialties_field_prompt" class="note">' +
			edit_profile.t_add_text_field + '</span>' if $('#custom_specialties_field_prompt').length == 0
		$('#custom_specialties_field_prompt').before '<div class="text_field">' +
			edit_profile.custom_specialties_template.replace('INDEX', String(++edit_profile.custom_specialties_i)) + '</div>'
		$('.custom_specialties input:last').focus().keydown (e) ->
			add_custom_specialties_text_field e if e.which == 13 # carriage return
	$('#add_custom_specialties_text_field').click add_custom_specialties_text_field
