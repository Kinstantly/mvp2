- formlet = 'specialties'
%th
	%span.editable= Profile.human_attribute_name :specialties
%td
	%p.attribute_display
		- if @profile.errorfree.specialties.present?
			= profile_wrap_item_names @profile.errorfree.specialties
		- else
			%span.note=  t 'views.profile.edit.specialties_blank'
	.edit.popover
		= form_for @profile, url: formlet_update_profile_path(@profile), remote: true, html: {id: "edit-#{formlet}"} do |f|
			= f.error_messages
			= hidden_field_tag 'formlet', formlet
			.specialty_names
				= f.label :specialties
				%br
				%br
				%span= t 'views.profile.edit.specialties_prompt'
				-# = button_tag id: 'add_specialty_names_text_field' do
				-# 	= content_tag :strong, t('views.profile.edit.specialty_name_button')
				%br
				= profile_specialty_names_hidden_field_tag(f)
				- i = 0; profile_specialty_names_defaults(@profile).each do |name|
					- i = i+1
					.text_field
						.delete_icon
						.char_count{id: "counter_#{i}"}
						= profile_specialty_names_autocomplete_field_tag(@profile, name, "#{i}", f)
				- @profile_specialty_names_i = i
				- @profile_specialty_names_text_field_template = profile_specialty_names_autocomplete_field_tag(@profile, '', 'INDEX', f)
				%span#specialty_names_field_prompt.note= t 'views.profile.edit.add_specialty_text_field'
				%br
				%span.note= t 'views.profile.edit.specialties_tip2'
			= f.submit t('views.profile.edit.submit'), disable_with: t('views.profile.edit.submit_disable'), class: 'save'
			= link_to t('views.profile.edit.cancel'), '#', class: 'cancel button'
		
			-# Use plain Javascript when using JSON.
			-# Coffeescript will reformat JSON which takes much too long and creates too much whitespace.
			-# OK to do ruby interpolation in a javascript filter--do it all here and not in the coffeescript filter!!
			-# Any interpolated values needed in the coffeescript should be stored here to be referenced by the result
			-# of the coffeescript filter.  This allows caching of the coffeescript compilation.
			:javascript
				// Values to be used in the next script.
				my_vars.specialty_names_i = #{@profile_specialty_names_i};
				my_vars.specialty_names_template = 
					'#{escape_javascript @profile_specialty_names_text_field_template}';
				
	- cache 'profiles_specialties_popover_coffeescript' do
		-# No ruby interpolation in the coffeescript filter.  It breaks caching of the coffeescript filter result.
		:coffeescript
			# Configure the input field with character count and ability to add another field.
			# Set up control to delete the associated specialty.
			configure_text_field = (selector, max_count, add_field) ->
				$('input', selector).simplyCountable({
					optionsForElement: (element) -> {counter: '#counter_' + $(element).attr('data-suffix')},
					maxCount: max_count,
					additionalEvents: 'railsAutocomplete.select',
				}).focus().keydown (e) ->
					add_field e if e.which == 13 # carriage return
				$('.delete_icon', selector).on 'click', (e) ->
					input_element = $(this).siblings('input').first()
					if input_element.attr?('disabled')
						input_element.removeAttr('disabled').removeClass('disabled')
					else
						input_element.attr('disabled', 'disabled').addClass('disabled')
					false
			
			# Add extra text input tags for specialty names.
			add_specialty_names_text_field = (e) ->
				++my_vars.specialty_names_i
				$('#specialty_names_field_prompt').before '<div class="text_field"><span class="delete_icon"></span><span id="counter_' +
					String(my_vars.specialty_names_i) +
					'" class="char_count"></span>' +
					my_vars.specialty_names_template.replace('INDEX', String(my_vars.specialty_names_i)) +
					'</div>'
				configure_text_field '.specialty_names .text_field:last', my_vars.edit_profile.max_lengths.specialty_names, add_specialty_names_text_field
				configure_autocomplete_form_fields '.specialty_names .text_field:last .autocomplete-form-field'
				false
			
			# Run after the document is loaded.
			$ ->
				# Button for adding a specialty name text field.
				# $('#add_specialty_names_text_field').on 'click', add_specialty_names_text_field
			
				# Configure specialty text fields that have already been displayed, e.g., on a validation error.
				configure_text_field '.specialty_names .text_field', my_vars.edit_profile.max_lengths.specialty_names, add_specialty_names_text_field
