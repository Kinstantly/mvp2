- info_email = "#{t('contact.emails.info.value')}@#{t('email_domain')}"
#content
	.edit_account.generic_form
		%h1= t 'views.user.edit.header'
		= form_for resource, as: resource_name, url: registration_path(resource_name), html: { method: :put } do |f|
			= devise_error_messages!
			.email.text_field
				= f.label :email, class: 'required'
				= f.email_field :email
				%span.note= t 'views.user.edit.email_note'
			.password.text_field
				= f.label :password, t('devise.passwords.edit_password_label')
				= f.password_field :password, autocomplete: 'off'
				%span.note= t 'views.user.edit.password_note', minimum: User::MIN_LENGTHS[:password]
			.password_confirmation.text_field
				= f.label :password_confirmation
				= f.password_field :password_confirmation, autocomplete: 'off'
			.username.text_field
				= f.label :username, class: 'required'
				= f.text_field :username
			- if resource.is_provider?
				.phone.text_field
					= f.label :phone
					= f.text_field :phone
			.current_password.text_field
				= f.label :current_password, class: 'required'
				= f.password_field :current_password, autocomplete: 'off'
				%span.note= t 'views.user.edit.current_password_note'
			- if resource.is_provider?
				.checkbox.newsletters_and_marketing_emails
					= f.check_box :provider_marketing_emails, id: 'provider_marketing_emails'
					= f.label :provider_marketing_emails
				.checkbox.newsletters_and_marketing_emails
					= f.check_box :provider_newsletters, id: 'provider_newsletters'
					= f.label :provider_newsletters
			- else
				.checkbox.newsletters_and_marketing_emails
					= f.check_box :parent_marketing_emails, id: 'parent_marketing_emails'
					= f.label :parent_marketing_emails
				.checkbox
					= f.check_box :parent_newsletters, id: 'parent_newsletters'
					= f.label :parent_newsletters
			.buttons
				= f.submit t('views.user.edit.submit'), disable_with: t('views.user.edit.submit_disable'), class: 'default'
				= link_to t('views.user.edit.cancel'), user_home_page, class: 'cancel_link'
			- if resource.is_provider? and resource.profile.try(:show_stripe_connect)
				%br
				%h1= t 'views.user.edit.stripe_connect_header'
				#payments_setup.formlet
					%h3
						= t 'views.user.edit.stripe_connect_prompt'
						= link_to 'Learn More', '#', id: 'stripe_more', class: 'more'
					#stripe_details.popover
						.cancel.close-popover-button
						%h2
							Connecting your Kinstantly account to Stripe
						%p
							When you connect your Kinstantly account to Stripe, we'll be able to interact with Stripe to make online payments as simple and easy as possible for you. 
						%p
							All sensitive information, such as bank account and credit card numbers, are stored by Stripe and never by Kinstantly. To read more about Stripe's security, please see
							= succeed '.' do
								%a{href: "http://stripe.com/help/security", target: '_blank'} stripe.com/help/security
						%p 
							Stripe and Kinstantly processing fees apply. To read more, please see
							= succeed '.' do
								%a{href: "http://stripe.com/us/pricing", target: '_blank'} stripe.com/us/pricing
						%p 
							Questions? Concerns? Send us an email at
							= succeed '.' do
								= mail_to info_email
					%br
					=link_to user_omniauth_authorize_path(:stripe_connect), class: "stripe-connect" do
						%span Connect with Stripe
	-#
		.cancel_account.generic_form
			= t('views.user.edit.cancel_account_prompt')
			= link_to t('views.user.edit.cancel_account'), registration_path(resource_name), data: { confirm: t('views.user.edit.cancel_account_confirmation') }, method: :delete

:coffeescript
	# Opens a modal window
	my_vars.f.win_popup = (url, w, h, name) ->
		left = (screen.width/2)-(w/2)
		top = (screen.height/2)-(h/2)
		window.open(url, name, "menubar=no,toolbar=no,status=no,width=" + w + ",height=" + h + ",toolbar=no,left=" +left + ",top=" + top);

	$ ->
		# Strip Connect opens a new win.
		$('a.stripe-connect').on 'click', (e) ->
			e.preventDefault()
			url = $(@).attr("href")
			my_vars.f.win_popup(url, 380, 600, 'Stripe Connect')
			false
		
		payments_setup_area = $('#payments_setup')

		# Open popover.
		$('#stripe_more').on 'click', (e) ->
			unless payments_setup_area.hasClass('active') 
				payments_setup_area.addClass 'active'
				place_popover $('#stripe_details'), 20
			false

		# Close button closes popover.
		$('#stripe_details .close-popover-button').on 'click', (e) ->
			payments_setup_area.removeClass 'active'

		# Close popover if clicked outside.
		$(document).on 'click', (e) ->
			clicked = $(e.target)
			if clicked.closest('.popover', '.formlet.active').length == 0
				payments_setup_area.removeClass 'active'
