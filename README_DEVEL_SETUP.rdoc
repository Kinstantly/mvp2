= Developer setup

Please add missing information to this document.

== Instance set up

=== Ruby

The Gemfile specifies Ruby 2.3.4 and Rails 4.2.7.1 (as of 18 April 2017). Developers and Heroku will use those versions (as specified by the Gemfile).

The Rails maintainers test version 4.2.7.1 against Ruby 2.3 (the last time I checked) and there is no guarantee that Rails 4.2.7.1 will work with later versions of Ruby.

You can install or upgrade Ruby using RVM.

 gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3
 \curl -sSL https://get.rvm.io | bash -s stable --ruby=2.3.4

RVM documentation is here: https://rvm.io/

=== Source repository

To get started clone the repository from GitHub.

 git clone https://github.com/Kinstantly/mvp2.git

*IMPORTANT:* Do all development on the 'develop' branch or on a branch created from the 'develop' branch!  (The 'master' branch is only used for deployment.)

 cd mvp2
 git checkout develop

=== Bundler and ruby gems

First make sure you're running the correct version of ruby.

 ruby -v

If you're using RVM, it will parse the Ruby version from the Gemfile as long as you don't have other RVM configuration files overriding the Gemfile.  To ensure that you'll always use the correct version in this repository, you can do this.

 rvm --ruby-version use 2.3.4 # Or whatever the correct version number is.

Get the latest version of RubyGems (for security reasons).

 gem update --system
 gem --version # Should be at least version 2.6.11.

Install Bundler.

 gem install bundler
 bundle --version # Should be at least version 1.14.6.

Install Qt 5.5 (needed by the capybara-webkit gem, which is used by our Cucumber setup). See https://github.com/thoughtbot/capybara-webkit/wiki/Installing-Qt-and-compiling-capybara-webkit.

Install needed gems.

 bundle install

If bundler runs into problems installing the sunspot gem, you might need to install it manually, e.g.,

 gem install sunspot --version 2.2.5 # Use the version specified in Gemfile.lock.
 gem install sunspot_rails --version 2.2.5 # You might not need to run this command.

Then try running 'bundle install' again.

Always run anything that uses ruby with 'bundle exec', i.e., rake, rails, unicorn, etc.  This will ensure that those commands are using the ruby gem versions that are specified by bundler.  Thus all developers and the production site will be working in the same environment.

These aliases help me with bundler, e.g., help me always use 'bundle exec',

 alias be='bundle exec'
 alias bs='bundle show'

For example:

 be rails -v
 mate $(bs devise)

=== Database

I'm running PostgreSQL 9.6.2 for my development instance.  Installation (on Mac OS X) and aliases:

 brew install postgresql
 alias pgstart='pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start'
 alias pgstop='pg_ctl -D /usr/local/var/postgres stop -s -m fast'
 alias pgps='ps -ef|egrep "postgres|PID"'

=== Search engine

For development, you can run Solr 4.1.0 from a gem.  It should install via bundler from my github repo (see Gemfile).  Everything you need should be in there and in the mvp2 repo under solr.  You need to run two solr instances: one for your devel instance and one for the tests to succeed.

Useful aliases:

 alias solrstart='bundle exec rake sunspot:solr:start'
 alias solrstop='bundle exec rake sunspot:solr:stop'
 alias solrps='ps -ef|egrep "solr|PID"'
 alias solrstarttest='RAILS_ENV=test bundle exec rake sunspot:solr:start'
 alias solrstoptest='RAILS_ENV=test bundle exec rake sunspot:solr:stop'
 alias solrstartall='solrstart; solrstarttest'
 alias solrstopall='solrstop; solrstoptest'
 alias solrreindex='bundle exec rake sunspot:solr:reindex'
 alias solrreindexheroku='heroku run rake sunspot:reindex'
 alias solrlog='less +G log/sunspot-solr-development.log'
 alias solrlogtest='less +G log/sunspot-solr-test.log'

FYI, in production we are using a cloud-based Solr instance on Websolr.

=== Web and background worker processes

I'm using Unicorn to start the web process(es).  In development I usually run two web processes.  The default is to run three.  To run just two web processes, set the WEB_CONCURRENCY variable.

 export WEB_CONCURRENCY=2
 alias unicornstart='bundle exec unicorn -p 5000 -c ./config/unicorn.rb'

I'm also running a background worker that runs delayed_job_active_record.  Usually, I don't run it during development.  However, you will need the background worker if you want to mimic the production environment and you're working on anything involving newsletter subscriptions, the admin interface, or anything else that uses delayed_job.

To run the background worker process, use foreman instead of running unicorn directly.  Foreman will do the same thing as happens on Heroku, i.e., run unicorn and the background worker (see Procfile in the mvp2 repo).  The heroku command-line-interface includes foreman, but it's broken.  Instead, install the gem yourself:

 gem install foreman
 foreman start

=== Caching

We have configured the application to use caching in production mode, e.g., for fragment caching.  You'll want to make sure that changes to view templates using fragment caching and models that are used in key-based caching will work OK with caching in production.  You can check this by turning on caching in development mode.  We are using memcached for caching, so you'll need to install it in your development environment if you don't already have it.

 # On MacOS.
 brew install memcached
 # Useful aliases.
 alias memcachestart='(cd ~ && /usr/local/bin/memcached -d)'
 alias memcacheconnect='telnet localhost 11211'

To use caching in development mode, set the PERFORM_CACHING environment variable, e.g.,

 PERFORM_CACHING=true bundle exec unicorn -p 5000 -c ./config/unicorn.rb

==== Caching and asset precompilation tests

If you're playing around with asset precompilation, you might want to test it from your development environment before deploying to production.  You can do that with the following rake task.

  RAILS_ENV=production bundle exec rake assets:precompile

The task puts the compiled assets in the public/assets directory.  If you are also running in caching mode (by setting the PERFORM_CACHING environment variable), the compiled assets will be loaded into the cache (i.e., memcached) and will be confounded with future changes you make to the assets in the development environment.

To solve this, after you are done testing, you should remove all the compiled assets from the public/assets directory (be careful to preserve assets that are in source control, e.g., fonts) and then clear out the cache (e.g., restart memcached).

For more information see: http://guides.rubyonrails.org/v4.0/asset_pipeline.html#precompiling-assets

== Database contents

Run the database migrations and the rake tasks below.

 bundle exec rake db:create
 bundle exec rake db:migrate
 bundle exec rake import_file='lib/data/Copy of Browse by Category clean 20130530.csv' import_specialties:write_specialties
 bundle exec rake import_file='lib/data/Copy of Browse by Category patch 20130605.csv' import_specialties:write_specialties

If you are a collaborator on the Heroku app, you can get a production DB dump from the postgres backups with the following command (or ask someone who has the privileges to run it):

 heroku pgbackups:url

If you ever do a mass update of your database, reindex your Solr instance.

 bundle exec rake sunspot:solr:reindex

=== Provider profiles

You'll need to manualy create a few provider profiles using the admin interface.  Create an admin user (see below).  Then you can start creating profiles here: http://localhost:5000/profiles/admin

== Create an admin user

You'll want an admin user.  Start up your instance using the above 'unicorn' or 'foreman' command.  Go to the home page and click on the "Provider? Join us" link.  Then sign up as a provider.  You'll need to confirm your email address from a link "sent" in email.  However, in the development environment transaction emails are not really sent, but they are logged.  So look in 'log/development.log' for an email. Copy the link in the email into your browser's location bar and hit enter.  That should confirm your new account.

Next add the 'admin' role to your new account using the rails console.

 bundle exec rails console
 user = User.last
 user.add_role :admin
 user.save
 exit

== Configure categories to display on home page

Next you'll want to get some categories to appear on the home page.  The best thing to do is to visit the home page on the production site and note which categories are displayed in each of the left and right columns.

On your development instance, sign in with your new admin user and then go to http://localhost:5000/categories

To make a category appear on the home page, set its display order.  You can do this by choosing a category to edit from the left-hand column of the listing at the above URL.

== PostgreSQL database upgrade

PostgreSQL major versions are represented by the first two digit groups of the version number, e.g., 9.3.  If you upgrade from one major version to a new one, then you'll need to upgrade your databases.  This involves

1. running the previous server version
1. dumping your databases using the new pg_dumpall executable
1. stopping the old server
1. backing up or renaming the old database cluster
1. creating a new database cluster using the new initdb executable
1. starting the new server
1. importing your dumped databases using the new psql executable
1. recompiling the libraries for your installed 'pg' gem

For more information see the upgrade page for your new server version, e.g., http://www.postgresql.org/docs/9.3/static/upgrading.html

Here's an example using homebrew with the following conditions:

* postgresql was upgraded from 9.2.4 to 9.3.0
* the 'pg' gem was version 0.14.1
* the architecture is x86_64

 brew update
 brew upgrade postgresql
 # The default postgresql executables should now be the new version.
 # You can check with the --version option before running each executable.
 
 /usr/local/Cellar/postgresql/9.2.4/bin/pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start
 
 pg_dumpall --version
 pg_dumpall > mvp2_20130927.dump
 
 /usr/local/Cellar/postgresql/9.2.4/bin/pg_ctl -D /usr/local/var/postgres stop
 
 mv /usr/local/var/postgres /usr/local/var/postgres_9.2
 
 initdb --version
 initdb /usr/local/var/postgres -E utf8
 
 pg_ctl --version
 pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start
 
 psql --version
 psql -d postgres -f mvp2_20130927.dump
 
 gem list pg
 ARCHFLAGS="-arch x86_64" gem install pg -v 0.14.1

When done upgrading, run all the Cucumber and Rspec tests to make sure all is well.

== Performance testing

See the README_TESTING.rdoc file.

== Heroku

If you need to interact with Heroku, install the Heroku command line interface (CLI).  For more information, go to https://toolbelt.herokuapp.com

=== Heroku CLI needs ruby 1.9+

If you are upgrading the Heroku CLI on a Mac OS X version before 10.9, you may run into the following problem if you are using a default Ruby version less than 1.9.

  > heroku
  /Users/wtls/.heroku/client/lib/heroku/command/ps.rb:2:in `require': no such file to load -- json (LoadError)
    from /Users/wtls/.heroku/client/lib/heroku/command/ps.rb:2
    from /Users/wtls/.heroku/client/lib/heroku/command.rb:14:in `require'
    from /Users/wtls/.heroku/client/lib/heroku/command.rb:14:in `load'
    from /Users/wtls/.heroku/client/lib/heroku/command.rb:13:in `each'
    from /Users/wtls/.heroku/client/lib/heroku/command.rb:13:in `load'
    from /Users/wtls/.heroku/client/lib/heroku/cli.rb:27:in `start'
    from /usr/local/heroku/bin/heroku~:25

To fix this, make sure you're using at least Ruby 2.2.2.  If you've installed Ruby via RVM, then the following edit should fix the problem.

  sed -e 's,/usr/bin/ruby,/usr/bin/env ruby,' -i '~' /usr/local/heroku/bin/heroku

For more information see https://github.com/heroku/toolbelt/issues/83

=== Production logs via Heroku CLI

You can examine the production logs with a Heroku CLI plugin.  See https://github.com/papertrail/papertrail-heroku-plugin
